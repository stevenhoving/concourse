// Code generated by counterfeiter. DO NOT EDIT.
package jobserverfakes

import (
	"context"
	"sync"

	"github.com/concourse/concourse/atc/api/accessor"
	"github.com/concourse/concourse/atc/api/jobserver"
	"github.com/concourse/concourse/atc/db/watch"
)

type FakeListAllJobsWatcher struct {
	WatchListAllJobsStub        func(context.Context, accessor.Access) <-chan []watch.ListAllJobsEvent
	watchListAllJobsMutex       sync.RWMutex
	watchListAllJobsArgsForCall []struct {
		arg1 context.Context
		arg2 accessor.Access
	}
	watchListAllJobsReturns struct {
		result1 <-chan []watch.ListAllJobsEvent
	}
	watchListAllJobsReturnsOnCall map[int]struct {
		result1 <-chan []watch.ListAllJobsEvent
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeListAllJobsWatcher) WatchListAllJobs(arg1 context.Context, arg2 accessor.Access) <-chan []watch.ListAllJobsEvent {
	fake.watchListAllJobsMutex.Lock()
	ret, specificReturn := fake.watchListAllJobsReturnsOnCall[len(fake.watchListAllJobsArgsForCall)]
	fake.watchListAllJobsArgsForCall = append(fake.watchListAllJobsArgsForCall, struct {
		arg1 context.Context
		arg2 accessor.Access
	}{arg1, arg2})
	fake.recordInvocation("WatchListAllJobs", []interface{}{arg1, arg2})
	fake.watchListAllJobsMutex.Unlock()
	if fake.WatchListAllJobsStub != nil {
		return fake.WatchListAllJobsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.watchListAllJobsReturns
	return fakeReturns.result1
}

func (fake *FakeListAllJobsWatcher) WatchListAllJobsCallCount() int {
	fake.watchListAllJobsMutex.RLock()
	defer fake.watchListAllJobsMutex.RUnlock()
	return len(fake.watchListAllJobsArgsForCall)
}

func (fake *FakeListAllJobsWatcher) WatchListAllJobsCalls(stub func(context.Context, accessor.Access) <-chan []watch.ListAllJobsEvent) {
	fake.watchListAllJobsMutex.Lock()
	defer fake.watchListAllJobsMutex.Unlock()
	fake.WatchListAllJobsStub = stub
}

func (fake *FakeListAllJobsWatcher) WatchListAllJobsArgsForCall(i int) (context.Context, accessor.Access) {
	fake.watchListAllJobsMutex.RLock()
	defer fake.watchListAllJobsMutex.RUnlock()
	argsForCall := fake.watchListAllJobsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeListAllJobsWatcher) WatchListAllJobsReturns(result1 <-chan []watch.ListAllJobsEvent) {
	fake.watchListAllJobsMutex.Lock()
	defer fake.watchListAllJobsMutex.Unlock()
	fake.WatchListAllJobsStub = nil
	fake.watchListAllJobsReturns = struct {
		result1 <-chan []watch.ListAllJobsEvent
	}{result1}
}

func (fake *FakeListAllJobsWatcher) WatchListAllJobsReturnsOnCall(i int, result1 <-chan []watch.ListAllJobsEvent) {
	fake.watchListAllJobsMutex.Lock()
	defer fake.watchListAllJobsMutex.Unlock()
	fake.WatchListAllJobsStub = nil
	if fake.watchListAllJobsReturnsOnCall == nil {
		fake.watchListAllJobsReturnsOnCall = make(map[int]struct {
			result1 <-chan []watch.ListAllJobsEvent
		})
	}
	fake.watchListAllJobsReturnsOnCall[i] = struct {
		result1 <-chan []watch.ListAllJobsEvent
	}{result1}
}

func (fake *FakeListAllJobsWatcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.watchListAllJobsMutex.RLock()
	defer fake.watchListAllJobsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeListAllJobsWatcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ jobserver.ListAllJobsWatcher = new(FakeListAllJobsWatcher)
